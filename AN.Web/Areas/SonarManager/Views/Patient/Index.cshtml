
@using AN.Core.Resources.Global;

@model AN.Core.ViewModels.PatientListViewModel

@{
    ViewBag.Title = Global.Patients;
    Layout = "~/Views/Shared/_CpanelLayout.cshtml";
    var dir = AN.Web.Helper.CultureHelper.Lang == Lang.EN ? "ltr" : "rtl";
}

@section styles{
    <link rel="stylesheet" href="~/lib/datatables/css/dataTables.bootstrap4.min.css" />
    <link rel="stylesheet" href="~/lib/select2/css/select2.min.css" type="text/css" />
    <link rel="stylesheet" href="~/lib/flatpickr/flatpickr.min.css" type="text/css" />
    <link rel="stylesheet" href="~/lib/bootstrap-fileinput/css/fileinput.min.css" />
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@Global.Patients</h1>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="container-fluid">
        <p>
            <button class="btn btn-info btn-sm" type="button" data-toggle="collapse" data-target="#FindPersonArea" aria-expanded="false" aria-controls="FindPersonArea">
                <i class="fa fa-plus"></i>  @PanelResource.AddNewPatient
            </button>
        </p>
        <div class="collapse" id="FindPersonArea">
            <div class="card card-body">
                <div class="row">
                    <div class="col-md-6">
                        <form id="FindPersonForm" class="form-horizontal" action="@Url.Action("FindPerson", "Patient", new {area = "SonarManager"})" method="post">
                            <div class="form-group">
                                <label for="SearchString">@Global.AddPatientFromPersons:</label>
                                <div class="input-group mb-3">
                                    <input type="text" id="SearchString" name="SearchString" class="form-control" maxlength="11" placeholder="@Global.MobileOrUniqueId" aria-label="Id of prescription" aria-describedby="basic-addon2" required>
                                    <div class="input-group-append">
                                        <button type="submit" class="btn btn-outline-info">@Global.SearchAndAdd  <i class="fa fa-search"></i></button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="insertNewSonarPatient();"><i class="fa fa-plus"></i> @PanelResource.AddNew</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <form method="post" action="#" id="PatientsFilterForm">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>@Global.SearchString</label>
                                <input type="text" id="FilterString" name="FilterString" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>@Global.TrackingCode</label>
                                <input type="text" id="UniqueId" name="UniqueId" class="form-control" />
                            </div>
                        </div>                       
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>@Global.From</label>
                                <input type="text" id="FromDate" name="FromDate" class="form-control common-datepicker" autocomplete="off" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>@Global.To</label>
                                <input type="text" id="ToDate" name="ToDate" class="form-control common-datepicker" autocomplete="off" />
                            </div>
                        </div>
                        <div class="col-md-2 mt-1">
                            <button type="button" class=" btn btn-outline-info mt-4" onclick="filterPatients()"><i class="fa fa-filter"></i>  @Global.Filter</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="card card-info card-outline">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12 table-responsive">
                        <table id="fingers10" class="table table-hover" style="width:100%">
                            <thead>
                                <tr>
                                    <th>@Html.DisplayNameFor(m => m.Id)</th>
                                    <th></th>
                                    <th>@Html.DisplayNameFor(m => m.Name)</th>
                                    <th>@Html.DisplayNameFor(m => m.Mobile)</th>
                                    <th>@Html.DisplayNameFor(m => m.Gender)</th>
                                    <th>@Html.DisplayNameFor(m => m.Age)</th>
                                    <th>@Html.DisplayNameFor(m => m.UniqueId)</th>
                                    <th>@Html.DisplayNameFor(m => m.Doctor)</th>
                                    <th></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/lib/datatables/js/jquery.dataTables.min.js"></script>
    <script src="~/lib/datatables/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/lib/select2/js/select2.min.js"></script>
    <script src="~/lib/flatpickr/flatpickr.min.js"></script>
    <script src="~/js/My/DataTablesLocale/dt_@(ViewBag.Lang.ToString()).js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/bootstrap-fileinput/js/fileinput.min.js"></script>
    <script type="text/javascript" src="~/lib/bootstrap-fileinput/themes/fas/theme.min.js"></script>
    <script type="text/javascript">
        var table;
        var findPersonForm = $("#FindPersonForm");
        var filterForm = $("#PatientsFilterForm");
        $(function () {
            filterForm.find(".select-2").select2({
                 width: '100%',
                 placeholder: '@Html.Raw(Global.SelectDoctor)',
                 dir: "@dir",
                 allowClear: true
            });
            filterForm.find(".common-datepicker").flatpickr();
            if ($('#fingers10').length !== 0) {
                table = $('#fingers10').DataTable({
                    language: dataTablesLocale,
                    processing: true,
                    serverSide: true,
                    orderCellsTop: true,
                    autoWidth: true,
                    deferRender: true,
                    order: [[ 2, "desc" ]],
                    lengthMenu: [5, 10, 15, 20],
                    dom: '<"row"<"col-sm-12 col-md-12"B><"col-sm-12 col-md-12 text-right"l>><"row"<"col-sm-12"tr>><"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                    ajax: {
                        type: "POST",
                        url: '/SonarManager/Patient/LoadTable/',
                        contentType: "application/json; charset=utf-8",
                        async: true,
                        headers: {
                            "XSRF-TOKEN": document.querySelector('[name="__RequestVerificationToken"]').value
                        },
                        data: function (data) {
                            data.FiltersObject = JSON.stringify(objectifyForm(filterForm.serializeArray()));
                            return JSON.stringify(data);
                        }
                    },
                    columns: [
                        {
                            data: "Id",
                            name: "eq",
                            visible: false,
                            searchable: false,
                            orderable: false
                        },
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row, meta) {
                                return row.AvatarHtml;
                            },
                            width: "5%"
                        },
                        {
                            data: "Name",
                            name: "co"
                        },
                        {
                            data: "Mobile",
                            name: "co",
                            width: "10%"
                        },
                        {
                            data: "Gender",
                            name: "co",
                            width: "10%"
                        },
                        {
                            data: "Age",
                            name: "co",
                            width: "10%"
                        },
                        {
                            data: "UniqueId",
                            name: "co",
                            width: "10%"
                        },
                        {
                            data: "Doctor",
                            name: "co"
                        },
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row, meta) {
                                return row.ActionsHtml;
                            }
                        }
                    ]
                });

                table.columns().every(function (index) {
                    $('#fingers10 thead tr:last th:eq(' + index + ') input')
                        .on('keyup',
                            function (e) {
                                if (e.keyCode === 13) {
                                    table.column($(this).parent().index() + ':visible').search(this.value).draw();
                                }
                            });
                });
            }

            $.validator.unobtrusive.parse(findPersonForm);
            $(findPersonForm).on("submit", function (e) {
                e.preventDefault();
                if (findPersonForm.valid()) {
                    waiting('FindPersonArea', '@AN.Core.Resources.Global.Global.PleaseWait');
                    $.ajax({
                        method: "POST",
                        url: $(this).attr("action"),
                        data: findPersonForm.serialize(), success: function (result) {
                            if (result.isFounded == true) {
                                 var commonModal = $("#AwroNoreModal");
                                 commonModal.find('#AwroNoreModalDialog').addClass("modal-lg");
                                 commonModal.find('.modal-title').text('@Html.Raw(PanelResource.AddNewPatient)');
                                 commonModal.find('#CommonModalContent').html(result.htmlContent);
                                 commonModal.modal({backdrop: 'static', keyboard: false});
                            } else {
                                Toast.fire({
                                    type: 'error',
                                    title: '@AN.Core.Resources.Global.Global.Error',
                                    text: "@Html.Raw(AN.Core.Resources.EntitiesResources.Messages.ItemNotFound)"
                                });
                            }
                        }, error: function (jqXHR, ex) {
                            handleAjaxError(jqXHR, ex);
                        }
                    }).always(function () {
                        waitingDone('FindPersonArea');
                    });
                }
            });
        });

        function reloadDataTable(initAgain = false) {
            table.ajax.reload(null, initAgain);
        }

        function filterPatients() {
            reloadDataTable(true);
        }

        function insertNewSonarPatient(id) {
            var title = '@Html.Raw(AN.Core.Resources.UI.AdminPanel.PanelResource.AddNewPatient)';
            if (id != null) {
                 title = '@Html.Raw(Global.Update)';
            }
            waiting('body', '@Global.PleaseWait');
            $.ajax({
                type: 'Get',
                url: "/SonarManager/Patient/CreateUpdate?id=" + id,
                success: function (response) {
                    var commonModal = $("#AwroNoreModal");
                    commonModal.find('#AwroNoreModalDialog').addClass("modal-lg");
                    commonModal.find('.modal-title').text(title);
                    commonModal.find('#CommonModalContent').html(response);
                    commonModal.modal({backdrop: 'static', keyboard: false});
                    $(".common-datapicker").flatpickr();
                },
                 error: function (jqXHR, ex) {
                    handleAjaxError(jqXHR, ex);
                 }
            }).always(function () {
                waitingDone('body');
            });
        }

        function manageSonarPatientAttachments(id) {
            var title = "@Html.Raw(Global.Attachments)";
            waiting('body', '@Global.PleaseWait');
            $.ajax({
                type: 'Get',
                url: "/SonarManager/Patient/Attachments?id=" + id,
                success: function (response) {
                    var commonModal = $("#AwroNoreModal");
                    commonModal.find('#AwroNoreModalDialog').addClass("modal-lg");
                    commonModal.find('.modal-title').text(title);
                    commonModal.find('#CommonModalContent').html(response);
                    commonModal.modal({backdrop: 'static', keyboard: false});
                    $(".common-datapicker").flatpickr();
                },
                 error: function (jqXHR, ex) {
                    handleAjaxError(jqXHR, ex);
                 }
            }).always(function () {
                waitingDone('body');
            });
        }       

        function  deleteSonarPatientItem(id) {
             Swal.fire({
                title: '@AN.Core.Resources.Global.Global.Msg_AreYouSure',
                text: "@Html.Raw(AN.Core.Resources.EntitiesResources.Messages.WontAbleRevertThis)",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '@AN.Core.Resources.Global.Global.Yes',
                cancelButtonText: '@AN.Core.Resources.Global.Global.No',
            }).then((result) => {
                if (result.value) {
                    waiting('body', '@AN.Core.Resources.Global.Global.PleaseWait');
                    $.ajax({
                        type: 'Get',
                        url: "/SonarManager/Patient/Delete/" + id,
                        success: function (response) {
                        if (response.success) {
                            reloadDataTable();
                            Toast.fire({
                                type: 'success',
                                title: '@AN.Core.Resources.Global.Global.Successful',
                                text: response.message
                            });
                        } else {
                            Toast.fire({
                                type: 'error',
                                title: '@AN.Core.Resources.Global.Global.Error',
                                text: response.message
                            });
                        }
                    },
                        error: function (jqXHR, ex) {
                            handleAjaxError(jqXHR, ex);
                        }
                    }).always(function () {
                        waitingDone('body');
                    });
                }
            });
        }
    </script>
}
