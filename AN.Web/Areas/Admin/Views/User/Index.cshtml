@model AN.Web.Areas.Admin.Models.UserListViewModel

@{
    Layout = "~/Views/Shared/_CpanelLayout.cshtml";
    var dir = AN.Web.Helper.CultureHelper.Lang == AN.Core.Enums.Lang.EN ? AN.Core.Enums.LayoutDir.LTR : AN.Core.Enums.LayoutDir.RTL;
}

@section styles{
    <link rel="stylesheet" href="~/lib/datatables/css/dataTables.bootstrap4.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap4c-custom-switch/dist/css/component-custom-switch.min.css" />
    <link rel="stylesheet" href="~/lib/select2/css/select2.min.css" type="text/css" />
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@AN.Core.Resources.UI.AdminPanel.PanelResource.Users</h1>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="container-fluid">
        <div class="card">
            <div class="card-body">
                <form method="post" action="#" id="UsersFilterForm">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>@AN.Core.Resources.Global.Global.SearchString</label>
                                <input type="text" id="FilterString" name="FilterString" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>@AN.Core.Resources.Global.Global.Person</label>
                                @Html.DropDownList("PersonId", ViewBag.PersonsList as IEnumerable<SelectListItem>, "", htmlAttributes: new { @class = "form-control select-2" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>@AN.Core.Resources.Global.Global.Center</label>
                                @Html.DropDownList("CenterId", ViewBag.CentersList as IEnumerable<SelectListItem>, "", htmlAttributes: new { @class = "form-control select-2" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label>@AN.Core.Resources.Global.Global.Role</label>
                                @Html.DropDownList("Role", ViewBag.RolesList as IEnumerable<SelectListItem>, "", htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-auto">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <button type="button" class="btn btn-outline-info form-control" onclick="filterUsers()"><i class="fa fa-filter"></i>  @AN.Core.Resources.Global.Global.Filter</button>
                            </div>
                        </div>

                    </div>
                </form>
            </div>
        </div>
        <div class="card card-info card-outline">
            <div class="card-header">
                <button class="btn btn-default @((AN.Core.Enums.Lang)ViewBag.Lang == AN.Core.Enums.Lang.EN ? "float-right" : "float-left")" onclick="userCreateUpdate('')"><i class="fa fa-plus"></i></button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12 table-responsive">
                        <table id="fingers10" class="table table-striped" style="width:100%">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>@Html.DisplayNameFor(m => m.UserName)</th>
                                    <th>@Html.DisplayNameFor(m => m.Person)</th>
                                    <th>@Html.DisplayNameFor(m => m.Center)</th>
                                    <th>@Html.DisplayNameFor(m => m.Mobile)</th>
                                    <th>@Html.DisplayNameFor(m => m.Role)</th>
                                    <th></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/lib/datatables/js/jquery.dataTables.min.js"></script>
    <script src="~/lib/datatables/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/lib/select2/js/select2.min.js"></script>
    <script src="~/js/My/DataTablesLocale/dt_@(ViewBag.Lang.ToString()).js" asp-append-version="true"></script>
    <script type="text/javascript">
        var table;
        var filterForm = $("#UsersFilterForm");
        $(function () {
            filterForm.find(".select-2").select2({
                width: '100%',
                dir: '@(dir.ToString().ToLower())',
                placeholder: "..."
            });
            if ($('#fingers10').length !== 0) {
                table = $('#fingers10').DataTable({
                    language: dataTablesLocale,
                    processing: true,
                    serverSide: true,
                    orderCellsTop: true,
                    autoWidth: true,
                    deferRender: true,
                    order: [[3, "asc"]],
                    lengthMenu: [5, 10, 15, 20],
                    dom: '<"row"<"col-sm-12 col-md-12"B><"col-sm-12 col-md-12 text-right"l>><"row"<"col-sm-12"tr>><"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                    buttons: [
                        {
                            text: 'Export to Excel',
                            className: 'btn btn-sm btn-dark',
                            action: function (e, dt, node, config) {
                                window.location.href = "/polyclinicmanager/offer/GetExcel";
                            },
                            init: function (api, node, config) {
                                $(node).removeClass('dt-button');
                            }
                        }
                    ],
                    ajax: {
                        type: "POST",
                        url: '/admin/user/LoadTable/',
                        contentType: "application/json; charset=utf-8",
                        async: true,
                        headers: {
                            "XSRF-TOKEN": document.querySelector('[name="__RequestVerificationToken"]').value
                        },
                        data: function (data) {
                            data.FiltersObject = JSON.stringify(objectifyForm(filterForm.serializeArray()));
                            return JSON.stringify(data);
                        }
                    },
                    columns: [
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row, meta) {
                                return row.LockoutStatusHtml;
                            }                            
                        },
                        {
                            data: "UserName",
                            name: "co"
                        },
                        {
                            data: "Person",
                            name: "co"
                        },
                        {
                            data: "Center",
                            name: "co"
                        },
                        {
                            data: "Mobile",
                            name: "co"
                        },
                        {
                            orderable: false,
                            searchable: false,
                            data: "Role",
                            name: "co"
                        },
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row, meta) {
                                return row.ActionsHtml;
                            }
                        }
                    ]
                });

                table.columns().every(function (index) {
                    $('#fingers10 thead tr:last th:eq(' + index + ') input')
                        .on('keyup',
                            function (e) {
                                if (e.keyCode === 13) {
                                    table.column($(this).parent().index() + ':visible').search(this.value).draw();
                                }
                            });
                });
            }
        });

        function reloadDataTable(initAgain = false) {
            table.ajax.reload(null, initAgain);
        }

        function filterUsers() {
            reloadDataTable(true);
        }

        function userCreateUpdate(id) {
            var title = id ? '@Html.Raw(AN.Core.Resources.Global.Global.UpdateUser)' : '@Html.Raw(AN.Core.Resources.Global.Global.NewUser)';
            waiting('body', '@AN.Core.Resources.Global.Global.PleaseWait');
            $.ajax({
                type: 'Get',
                url: "/admin/User/CreateUpdate?id=" + id,
                success: function (response) {
                    var commonModal = $("#AwroNoreModal");
                    commonModal.find('#AwroNoreModalDialog').addClass("modal-lg");
                    commonModal.find('.modal-title').text(title);
                    commonModal.find('#CommonModalContent').html(response);
                    commonModal.modal({backdrop: 'static', keyboard: false});
                    $(".select2").select2({
                       width: '100%',
                       dir: '@(dir.ToString().ToLower())'                       
                    });                   
                },
                error: function (jqXHR, ex) {
                    handleAjaxError(jqXHR, ex);
                }
            }).always(function () {
                waitingDone('body');
            });
        }

         function  deleteIdentityUser(id) {
             Swal.fire({
                title: '@AN.Core.Resources.Global.Global.Msg_AreYouSure',
                text: "@Html.Raw(AN.Core.Resources.EntitiesResources.Messages.WontAbleRevertThis)",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '@AN.Core.Resources.Global.Global.Yes',
                cancelButtonText: '@AN.Core.Resources.Global.Global.No',
            }).then((result) => {
                if (result.value) {
                    waiting('body', '@AN.Core.Resources.Global.Global.PleaseWait');
                    $.ajax({
                        type: 'Get',
                        url: "/Admin/User/Delete/" + id,
                        success: function (response) {
                        if (response.success) {
                            reloadDataTable();
                            Toast.fire({
                                type: 'success',
                                title: '@AN.Core.Resources.Global.Global.Successful',
                                text: response.message
                            });
                        } else {
                            Toast.fire({
                                type: 'error',
                                title: '@AN.Core.Resources.Global.Global.Error',
                                text: response.message
                            });
                        }
                    },
                        error: function (jqXHR, ex) {
                            handleAjaxError(jqXHR, ex);
                        }
                    }).always(function () {
                        waitingDone('body');
                    });
                }
            });
        }

        function lockoutIdentityUser(id, isLocked) {
             Swal.fire({
                title: '@AN.Core.Resources.Global.Global.Msg_AreYouSure',
                text: "@Html.Raw(AN.Core.Resources.EntitiesResources.Messages.WontAbleRevertThis)",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '@AN.Core.Resources.Global.Global.Yes',
                cancelButtonText: '@AN.Core.Resources.Global.Global.No',
            }).then((result) => {
                if (result.value) {
                    waiting('body', '@AN.Core.Resources.Global.Global.PleaseWait');
                    $.ajax({
                        type: 'Get',
                        url: "/Admin/User/Lockout?id=" + id + "&isLocked=" + isLocked,
                        success: function (response) {
                        if (response.success) {
                            reloadDataTable();
                            Toast.fire({
                                type: 'success',
                                title: '@AN.Core.Resources.Global.Global.Successful',
                                text: response.message
                            });
                        } else {
                            Toast.fire({
                                type: 'error',
                                title: '@AN.Core.Resources.Global.Global.Error',
                                text: response.message
                            });
                        }
                    },
                        error: function (jqXHR, ex) {
                            handleAjaxError(jqXHR, ex);
                        }
                    }).always(function () {
                        waitingDone('body');
                    });
                }
            });
        }
    </script>
}