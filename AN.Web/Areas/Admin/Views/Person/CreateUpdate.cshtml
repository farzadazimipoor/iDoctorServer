@using AN.Core.Resources.Global;

@model AN.Core.ViewModels.PersonCreateUpdateViewModel

<link rel="stylesheet" href="~/lib/select2/css/select2.min.css" type="text/css" />
<link rel="stylesheet" href="~/lib/bootstrap-fileinput/css/fileinput.min.css" />

<div id="createPersonArea">
    <form id="createPersonForm" class="form-horizontal" action="@Url.Action("CreateUpdate", "Person", new {area = "Admin"})" method="POST" enctype="multipart/form-data">
        @Html.HiddenFor(m => m.Id)
        <div class="row">
            <div class="row">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="m-0">@Global.Kurdish</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FirstName_Ku)
                                @Html.TextBoxFor(m => m.FirstName_Ku, new { maxlength = "50", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.FirstName_Ku, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SecondName_Ku)
                                @Html.TextBoxFor(m => m.SecondName_Ku, new { maxlength = "50", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.SecondName_Ku, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.ThirdName_Ku)
                                @Html.TextBoxFor(m => m.ThirdName_Ku, new { maxlength = "50", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ThirdName_Ku, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="m-0">@Global.Arabic</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FirstName_Ar)
                                @Html.TextBoxFor(m => m.FirstName_Ar, new { maxlength = "50", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.FirstName_Ar, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SecondName_Ar)
                                @Html.TextBoxFor(m => m.SecondName_Ar, new { maxlength = "50", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.SecondName_Ar, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.ThirdName_Ar)
                                @Html.TextBoxFor(m => m.ThirdName_Ar, new { maxlength = "50", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ThirdName_Ar, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="m-0">@Global.English</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                @Html.LabelFor(m => m.FirstName)
                                @Html.TextBoxFor(m => m.FirstName, new { maxlength = "50", @class = "form-control beLTR pl-3" })
                                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SecondName)
                                @Html.TextBoxFor(m => m.SecondName, new { maxlength = "50", @class = "form-control beLTR pl-3" })
                                @Html.ValidationMessageFor(m => m.SecondName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.ThirdName)
                                @Html.TextBoxFor(m => m.ThirdName, new { maxlength = "50", @class = "form-control beLTR pl-3" })
                                @Html.ValidationMessageFor(m => m.ThirdName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card card-body mr-2 ml-2">
                    <div class="col-12">
                        <div class="row">
                            <div class="col-7">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.Gender)
                                            @Html.DropDownListFor(m => m.Gender, (ViewBag.GendersList as IEnumerable<SelectListItem>).ToList(), new { @tabindex = "5", @class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.Mobile)
                                            @Html.TextBoxFor(m => m.Mobile, new { @class = "form-control NumericOnly" })
                                            @Html.ValidationMessageFor(m => m.Mobile, "", new { @class = "text-danger", maxlength = "11" })
                                        </div>
                                    </div>
                                    <div class="col-md-4" style="direction: ltr !important;">
                                        @Html.LabelFor(m => m.IsEmployee)
                                        <div class="custom-switch custom-switch-label-io">
                                            @Html.CheckBoxFor(m => m.IsEmployee, new { @class = "custom-switch-input" })
                                            <label class="custom-switch-btn" for="IsEmployee"></label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-5 text-center">
                                <div class="kv-avatar">
                                    <div class="file-loading">
                                        @if (Model.Id != null)
                                        {
                                            <input id="ImageUpload" name="ImageUpload" type="file">
                                        }
                                        else
                                        {
                                            <input id="ImageUpload" name="ImageUpload" type="file" required>
                                        }
                                    </div>
                                </div>
                                <div class="kv-avatar-hint"><small>Max File Size: 500 KB</small></div>
                                <div id="kv-avatar-errors-1" class="center-block" style="display:none"></div>
                                @Html.ValidationMessageFor(m => m.ImageUpload, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>                
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 mt-5 text-center">
                <button type="submit" class="btn btn-info">@(Model.Id == null ? AN.Core.Resources.UI.AdminPanel.PanelResource.AddNew : AN.Core.Resources.Global.Global.Update)</button>
                <button id="CancelAddPatient" type="button" class="btn btn-danger" data-dismiss="modal">@AN.Core.Resources.Global.Global.Cancel </button>
            </div>
        </div>
    </form>
</div>

<script type="text/javascript" src="~/lib/select2/js/select2.min.js"></script>
<script type="text/javascript" src="~/lib/bootstrap-fileinput/js/fileinput.min.js"></script>
<script type="text/javascript" src="~/lib/bootstrap-fileinput/themes/fas/theme.min.js"></script>
<script type="text/javascript">
    $(function () {
        var form = $("#createPersonArea").find('form');
        $.validator.unobtrusive.parse(form);
        $(form).on("submit", function (e) {
            e.preventDefault();
            if (form.valid()) {
                var data = new FormData($(this)[0]);
                waiting('createPersonArea', '@AN.Core.Resources.Global.Global.PleaseWait');
                $.ajax({
                    method: "POST",
                    url: $(this).attr("action"),
                    processData: false,
                    contentType: false, // contentType option to false is used for multipart/form-data forms that pass files
                    data: data,
                    success: function (result) {
                        if (result.success) {
                            form.closest('.modal').modal('toggle');
                            Toast.fire({
                                type: 'success',
                                title: '@AN.Core.Resources.Global.Global.Successful',
                                text: result.message
                            });
                            reloadDataTable();
                        } else {
                            Toast.fire({
                                type: 'error',
                                title: '@AN.Core.Resources.Global.Global.Error',
                                text: result.message
                            });
                        }
                    },
                    error: function (jqXHR, ex) {
                        handleAjaxError(jqXHR, ex);
                    }
                }).always(function () {
                    waitingDone('createPersonArea');
                });
            }
        });
    });

    $("#ImageUpload").fileinput({
        theme: "fas",
        overwriteInitial: true,
        showClose: false,
        showCaption: false,
        showUpload: false,
        browseLabel: '',
        removeLabel: '',
        browseIcon: '<i class="fa fa-folder-open"></i>',
        removeIcon: '<i class="fa fa-trash"></i>',
        removeTitle: 'Cancel or reset changes',
        elErrorContainer: '#kv-avatar-errors-1',
        msgErrorClass: 'alert alert-block alert-danger',
        defaultPreviewContent: '@Html.Raw(ViewBag.AvatarPreview)',
        maxFileSize: 500,
        minImageWidth: 180,
        minImageHeight: 180,
        maxImageWidth: 512,
        maxImageHeight: 512,
        allowedFileExtensions: ["jpg", "png", "jpeg"]
    });
</script>
