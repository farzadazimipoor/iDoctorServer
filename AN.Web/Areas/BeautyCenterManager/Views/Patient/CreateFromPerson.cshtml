@using AN.Web.Helper;

@model AN.Web.Areas.BeautyCenterManager.Models.CreatePatientFromPersonViewModel

@{
    var dir = CultureHelper.Lang == Lang.EN ? LayoutDir.LTR : LayoutDir.RTL;
}

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-5">
                <div class="card card-primary card-outline">
                    <div class="card-body box-profile">
                        <div class="text-center">
                            <img class="profile-user-img img-fluid img-circle"
                                 src="@Model.PersonInfo.Avatar"
                                 alt="User profile picture">
                        </div>
                        <h3 class="profile-username text-center">@Model.PersonInfo.FirstName @Model.PersonInfo.SecondName @Model.PersonInfo.ThirdName</h3>
                        <p class="text-muted text-center">@Model.PersonInfo.UniqueId</p>
                        <ul class="list-group list-group-unbordered mb-3">
                            <li class="list-group-item">
                                <b class="@(dir == LayoutDir.RTL ? "float-right" : "float-left")">@Global.Mobile</b> <a class="@(dir == LayoutDir.RTL ? "float-left" : "float-right")">@Model.PersonInfo.MobileNumber</a>
                            </li>
                            <li class="list-group-item">
                                <b class="@(dir == LayoutDir.RTL ? "float-right" : "float-left")">@Global.Age</b> <a class="@(dir == LayoutDir.RTL ? "float-left" : "float-right")">@Model.PersonInfo.Age</a>
                            </li>
                            <li class="list-group-item">
                                <b class="@(dir == LayoutDir.RTL ? "float-right" : "float-left")">@Global.Gender</b> <a class="@(dir == LayoutDir.RTL ? "float-left" : "float-right")">@Model.PersonInfo.Sex</a>
                            </li>
                        </ul>
                        <strong><i class="fas fa-map-marker-alt mr-1"></i> @Global.Address</strong>
                        <p class="text-muted">@Model.PersonInfo.Address</p>
                        <hr>
                        <strong><i class="far fa-file-alt mr-1"></i> Notes</strong>
                        <p class="text-muted">@Model.PersonInfo.MarriageStatus</p>
                    </div>
                </div>
            </div>
            <div class="col-md-7">
                <div class="card">                 
                    <div class="card-body">
                        <form id="CreatePatientFromPersonForm" method="post" action="@Url.Action("CreateFromPerson", "Patient", new {area = "BeautyCenterManager"})">
                            @Html.HiddenFor(m => m.PersonInfo.Id)
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.ServiceSupplyId)
                                        @Html.DropDownListFor(m => m.ServiceSupplyId, Model.DoctorsList, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ServiceSupplyId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col-md-4">
                                    <button type="submit" class="btn btn-info">@PanelResource.AddNew</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script type="text/javascript">
    $(function () {
        var form = $("#CreatePatientFromPersonForm");
        $.validator.unobtrusive.parse(form);
        $(form).on("submit", function (e) {
            e.preventDefault();
            if (form.valid()) {
                waiting('AwroNoreModalDialog', '@AN.Core.Resources.Global.Global.PleaseWait');
                $.ajax({
                    method: "POST",
                    url: $(this).attr("action"),
                    dataType: "json",
                    data: form.serialize(), success: function (result) {
                        if (result.success) {
                            reloadDataTable();
                            form.closest('.modal').modal('toggle');
                            Toast.fire({
                                type: 'success',
                                title: '@AN.Core.Resources.Global.Global.Successful',
                                text: "@Html.Raw(AN.Core.Resources.EntitiesResources.Messages.ItemAddedSuccessFully)"
                             });
                        }                         
                    }, error: function (jqXHR,ex) {
                        handleAjaxError(jqXHR, ex);
                    }
                }).always(function () {
                    waitingDone('AwroNoreModalDialog');
                });
            }
        });
    });

</script>


