// <auto-generated />
using System;
using AN.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace AN.DAL.Migrations
{
    [DbContext(typeof(BanobatDbContext))]
    [Migration("20191113195324_GeneralAttachment")]
    partial class GeneralAttachment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("an")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AN.Core.Domain.AdditionalExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserDoctorId");

                    b.HasKey("Id");

                    b.HasIndex("UserDoctorId");

                    b.ToTable("AdditionalExpertise");
                });

            modelBuilder.Entity("AN.Core.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Book_DateTime");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("End_DateTime");

                    b.Property<bool>("IsAnnounced");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OfferId");

                    b.Property<int?>("PatientInsuranceId");

                    b.Property<int>("Paymentstatus");

                    b.Property<int>("PersonId");

                    b.Property<int>("ReservationChannel");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<DateTime>("Start_DateTime");

                    b.Property<int>("Status");

                    b.Property<string>("UniqueTrackingCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.HasIndex("UniqueTrackingCode")
                        .IsUnique();

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("AN.Core.Domain.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DeleteUrl")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("FileType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<int>("Owner");

                    b.Property<int>("OwnerTableId");

                    b.Property<double>("Size");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AN.Core.Domain.BlockedIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlockedIp");
                });

            modelBuilder.Entity("AN.Core.Domain.BlockedMobiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ShiftCenterId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("BlockedMobiles");
                });

            modelBuilder.Entity("AN.Core.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("ProvinceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(3089),
                            IsDeleted = false,
                            Name = "Erbil",
                            Name_Ar = "اربیل",
                            Name_Ku = "هەولێر",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(3156),
                            IsDeleted = false,
                            Name = "Sulaymaniyah",
                            Name_Ar = "السلیمانیه",
                            Name_Ku = "سلێمانی",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(3161),
                            IsDeleted = false,
                            Name = "Dahuk",
                            Name_Ar = "دهوك",
                            Name_Ku = "دهۆک",
                            ProvinceId = 3
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("HospitalId");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGovernmental")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHostelry")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIndependent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Point>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Notification")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_Images")
                        .HasColumnName("Images");

                    b.Property<string>("_PhoneNumbers")
                        .HasColumnName("PhoneNumbers");

                    b.Property<string>("_Vocations")
                        .HasColumnName("Vocations");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("AN.Core.Domain.ClinicPersons", b =>
                {
                    b.Property<int>("Clinic_Id");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TempGeneratedPassword");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Clinic_Id", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ClinicPersons");
                });

            modelBuilder.Entity("AN.Core.Domain.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUnread")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Mobile")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("AN.Core.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("CountryName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("DoctorActivityLog");
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorExpertise", b =>
                {
                    b.Property<int>("UserDoctorId");

                    b.Property<int>("ExpertiseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ScientificCategoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserDoctorId", "ExpertiseId");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("ScientificCategoryId");

                    b.ToTable("DoctorExpertise");
                });

            modelBuilder.Entity("AN.Core.Domain.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("ConsumptionTypes")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("ConsumptionTypes_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("ConsumptionTypes_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("EffectMechanism")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("EffectMechanism_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("EffectMechanism_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("SideEffects")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("SideEffects_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("SideEffects_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("AN.Core.Domain.DrugGroups", b =>
                {
                    b.Property<int>("PharmaceuticalGroupId");

                    b.Property<int>("DrugId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PharmaceuticalGroupId", "DrugId");

                    b.HasAlternateKey("DrugId", "PharmaceuticalGroupId");

                    b.ToTable("DrugGroups");
                });

            modelBuilder.Entity("AN.Core.Domain.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Controller")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Parameters")
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("AN.Core.Domain.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("ExpertiseCategoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseCategoryId");

                    b.ToTable("Expertise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 67, DateTimeKind.Local).AddTicks(4831),
                            Description_Ku = "شارەزای بوواری منداڵان",
                            ExpertiseCategoryId = 1,
                            IsDeleted = false,
                            Name = "Kids Specialist",
                            Name_Ar = "خبرة الأطفال",
                            Name_Ku = "شارەزای بوواری منداڵان"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 67, DateTimeKind.Local).AddTicks(4876),
                            Description_Ku = "شارەزای دڵ",
                            ExpertiseCategoryId = 2,
                            IsDeleted = false,
                            Name = "Heart Specialist",
                            Name_Ar = "أخصائي القلب",
                            Name_Ku = "شارەزای دڵ"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.ExpertiseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpertiseCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(8461),
                            Description_Ku = "شارەزای منداڵان",
                            IsDeleted = false,
                            Name = "Kids",
                            Name_Ar = "الأطفال",
                            Name_Ku = "منداڵان"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 67, DateTimeKind.Local).AddTicks(1153),
                            Description_Ku = "شارەزای دڵ",
                            IsDeleted = false,
                            Name = "Heart",
                            Name_Ar = "قلب",
                            Name_Ku = "دڵ"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGovernmental")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Point>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Notification")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_PhoneNumbers")
                        .HasColumnName("PhoneNumbers");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("AN.Core.Domain.HospitalPersons", b =>
                {
                    b.Property<int>("HospitalId");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TempGeneratedPassword");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HospitalId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("HospitalPersons");
                });

            modelBuilder.Entity("AN.Core.Domain.IdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("AN.Core.Domain.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("AN.Core.Domain.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaxCount");

                    b.Property<int>("RemainedCount");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("AN.Core.Domain.PatientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InsuranceId");

                    b.Property<string>("InsuranceNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("UserPatientId");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("UserPatientId");

                    b.ToTable("PatientInsurances");
                });

            modelBuilder.Entity("AN.Core.Domain.PatientPersonInfo", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FreeTurnsCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId");

                    b.ToTable("PatientPersonInfo");
                });

            modelBuilder.Entity("AN.Core.Domain.PaymentInfo", b =>
                {
                    b.Property<int>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrderId")
                        .IsUnicode(true);

                    b.Property<decimal>("Price");

                    b.Property<long>("SaleOrderId");

                    b.Property<long>("SaleReferenceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.ToTable("PaymentInfo");
                });

            modelBuilder.Entity("AN.Core.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<float>("Age");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Birthdate");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreationPlaceId");

                    b.Property<int?>("CreatorRole");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FirstName_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FirstName_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Gender");

                    b.Property<float?>("Height");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmployee");

                    b.Property<int?>("Language");

                    b.Property<string>("LivingLocation")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int?>("MarriageStatus");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("MobileConfirmed");

                    b.Property<string>("NamePrefix")
                        .HasMaxLength(20);

                    b.Property<int?>("ParentId");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SecondName_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SecondName_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ThirdName_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ThirdName_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("UniqueId")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Weight");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50);

                    b.Property<string>("_FcmInstanceIds");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasFilter("[UniqueId] IS NOT NULL");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("AN.Core.Domain.PharmaceuticalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable(" PharmaceuticalGroup");
                });

            modelBuilder.Entity("AN.Core.Domain.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Avatar");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<Point>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_Images")
                        .HasColumnName("Images");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("AN.Core.Domain.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 62, DateTimeKind.Local).AddTicks(3214),
                            IsDeleted = false,
                            Name = "Erbil",
                            Name_Ar = "اربیل",
                            Name_Ku = "هەولێر"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 62, DateTimeKind.Local).AddTicks(4316),
                            IsDeleted = false,
                            Name = "Sulaymaniyah",
                            Name_Ar = "السلیمانیه",
                            Name_Ku = "سلێمانی"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 62, DateTimeKind.Local).AddTicks(4321),
                            IsDeleted = false,
                            Name = "Dahuk",
                            Name_Ar = "دهوك",
                            Name_Ku = "دهۆک"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Downloads");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Key");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("AN.Core.Domain.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("End_DateTime");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaxCount");

                    b.Property<int>("Prerequisite");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("Shift");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<DateTime>("Start_DateTime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("AN.Core.Domain.ScientificCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ScientificCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(4246),
                            Description_Ku = "",
                            IsDeleted = false,
                            Name = "General",
                            Name_Ar = "عام",
                            Name_Ku = "گشتی"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(6763),
                            Description_Ku = "",
                            IsDeleted = false,
                            Name = "Specialist",
                            Name_Ar = "اختصاصی",
                            Name_Ku = "شارەزا"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(6790),
                            Description_Ku = "",
                            IsDeleted = false,
                            Name = "Expertise",
                            Name_Ar = "ماجیستر",
                            Name_Ku = "ماستەر"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("ServiceCategoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2250),
                            IsDeleted = false,
                            Name = "Visit",
                            Name_Ar = "يزور",
                            Name_Ku = "ڤیزیت",
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2540),
                            IsDeleted = false,
                            Name = "Hydrofacial",
                            Name_Ar = "الهايدرا فيشيل",
                            Name_Ku = "Hydrofacial",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2545),
                            IsDeleted = false,
                            Name = "Scarlet",
                            Name_Ar = "سكارليت",
                            Name_Ku = "Scarlet",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2549),
                            IsDeleted = false,
                            Name = "Hypho",
                            Name_Ar = "هايفو",
                            Name_Ku = "Hypho",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2553),
                            IsDeleted = false,
                            Name = "PRP",
                            Name_Ar = "بلازما - PRP",
                            Name_Ku = "PRP",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2556),
                            IsDeleted = false,
                            Name = "Mesotherapy",
                            Name_Ar = "بلازماميزو",
                            Name_Ku = "Mesotherapy",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2559),
                            IsDeleted = false,
                            Name = "Thread face lifting",
                            Name_Ar = "شد الوجه بالخيوط",
                            Name_Ku = "Thread face lifting",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2563),
                            IsDeleted = false,
                            Name = "Eyebrow lifting",
                            Name_Ar = "رفع الحاجب",
                            Name_Ku = "Eyebrow lifting",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2566),
                            IsDeleted = false,
                            Name = "Pigmentation treatment",
                            Name_Ar = "علاج التصبغات",
                            Name_Ku = "Pigmentation treatment",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2569),
                            IsDeleted = false,
                            Name = "Acne & acne scar management",
                            Name_Ar = "علاج ندبات حب الشباب",
                            Name_Ku = "Acne & acne scar management",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2572),
                            IsDeleted = false,
                            Name = "Nose reconstruction",
                            Name_Ar = "عملية تجميل الأنف",
                            Name_Ku = "Nose reconstruction",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2575),
                            IsDeleted = false,
                            Name = "Nevus removal",
                            Name_Ar = "إزالة الشامة",
                            Name_Ku = "Nevus removal",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2578),
                            IsDeleted = false,
                            Name = "Carbon laser",
                            Name_Ar = "ليزر كربوني",
                            Name_Ku = "Carbon laser",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2582),
                            IsDeleted = false,
                            Name = "Eyebrow tatoo",
                            Name_Ar = "تاتو الحواجب",
                            Name_Ku = "Eyebrow tatoo ",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2585),
                            IsDeleted = false,
                            Name = "face Adjustments",
                            Name_Ar = "تعديل الوجه",
                            Name_Ku = "face Adjustments",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2588),
                            IsDeleted = false,
                            Name = "Eyebrow Extention",
                            Name_Ar = "إكستنشن الرموش ",
                            Name_Ku = "Eyebrow Extention",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2716),
                            IsDeleted = false,
                            Name = "Full makeup",
                            Name_Ar = "مكياج سهرة/ ثقيل",
                            Name_Ku = "Full makeup",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2720),
                            IsDeleted = false,
                            Name = "Simple makeup",
                            Name_Ar = "مكياج ناعم",
                            Name_Ku = "Simple makeup",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2745),
                            IsDeleted = false,
                            Name = "Sculpture",
                            Name_Ar = "نحت الجسم",
                            Name_Ku = "Sculpture",
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2749),
                            IsDeleted = false,
                            Name = "Body contouring",
                            Name_Ar = "Body contouring",
                            Name_Ku = "Body contouring",
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2770),
                            IsDeleted = false,
                            Name = "Keratin",
                            Name_Ar = "كرياتين",
                            Name_Ku = "Keratin",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2773),
                            IsDeleted = false,
                            Name = "Mask",
                            Name_Ar = "ماسك",
                            Name_Ku = "Mask",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2776),
                            IsDeleted = false,
                            Name = "Hair falling treatment",
                            Name_Ar = "علاج تساقط الشعر",
                            Name_Ku = "Hair falling treatment",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2780),
                            IsDeleted = false,
                            Name = "Hair transplant",
                            Name_Ar = "زرع الشعر",
                            Name_Ku = "Hair transplant",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2783),
                            IsDeleted = false,
                            Name = "Hair extension",
                            Name_Ar = "إكستنشن الشعر",
                            Name_Ku = "Hair extension",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2786),
                            IsDeleted = false,
                            Name = "Dye",
                            Name_Ar = "صبغ",
                            Name_Ku = "Dye",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2789),
                            IsDeleted = false,
                            Name = "Hair Styling",
                            Name_Ar = "تسريحة شعر",
                            Name_Ku = "Hair Styling",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2792),
                            IsDeleted = false,
                            Name = "Hair root dye",
                            Name_Ar = "صبغ اطراف الشعر",
                            Name_Ku = "Hair root dye",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2795),
                            IsDeleted = false,
                            Name = "Cutting",
                            Name_Ar = "قص شعر",
                            Name_Ku = "Cutting",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2800),
                            IsDeleted = false,
                            Name = "سشوار",
                            Name_Ar = "سشوار",
                            Name_Ku = "سشوار",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2803),
                            IsDeleted = false,
                            Name = "موهير",
                            Name_Ar = "موهير",
                            Name_Ku = "موهير",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2806),
                            IsDeleted = false,
                            Name = "اونبرة",
                            Name_Ar = "اونبرة",
                            Name_Ku = "اونبرة",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2829),
                            IsDeleted = false,
                            Name = "Full body",
                            Name_Ar = "كامل الجسم",
                            Name_Ku = "Full body",
                            ServiceCategoryId = 6
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2833),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "Face",
                            ServiceCategoryId = 6
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2855),
                            IsDeleted = false,
                            Name = "Manicure",
                            Name_Ar = "منيكير",
                            Name_Ku = "Manicure",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2858),
                            IsDeleted = false,
                            Name = "Pedicure",
                            Name_Ar = "بديكير",
                            Name_Ku = "Pedicure",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2861),
                            IsDeleted = false,
                            Name = "Gel",
                            Name_Ar = "جلّ الأظافر",
                            Name_Ku = "Gel",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2864),
                            IsDeleted = false,
                            Name = "Acrylic",
                            Name_Ar = "آكريليك",
                            Name_Ku = "Acrylic",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2884),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "Face",
                            ServiceCategoryId = 8
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 66, DateTimeKind.Local).AddTicks(2887),
                            IsDeleted = false,
                            Name = "Body",
                            Name_Ar = "الجسم",
                            Name_Ku = "Body",
                            ServiceCategoryId = 8
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterType = 0,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7590),
                            IsDeleted = false,
                            Name = "Health",
                            Name_Ar = "الصحة",
                            Name_Ku = "تەندروستی"
                        },
                        new
                        {
                            Id = 2,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7636),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "دەموچاو"
                        },
                        new
                        {
                            Id = 3,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7641),
                            IsDeleted = false,
                            Name = "Makeup",
                            Name_Ar = "مكياج",
                            Name_Ku = "مكياج"
                        },
                        new
                        {
                            Id = 4,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7644),
                            IsDeleted = false,
                            Name = "Body",
                            Name_Ar = "الجسم",
                            Name_Ku = "جەستە"
                        },
                        new
                        {
                            Id = 5,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7648),
                            IsDeleted = false,
                            Name = "Hair",
                            Name_Ar = "الشعر",
                            Name_Ku = "پرچ"
                        },
                        new
                        {
                            Id = 6,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7651),
                            IsDeleted = false,
                            Name = "Laser",
                            Name_Ar = "ليزر",
                            Name_Ku = "لەیز‌ەر"
                        },
                        new
                        {
                            Id = 7,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7654),
                            IsDeleted = false,
                            Name = "Nail",
                            Name_Ar = "الأضافر",
                            Name_Ku = "نینۆک"
                        },
                        new
                        {
                            Id = 8,
                            CenterType = 1,
                            CreatedAt = new DateTime(2019, 11, 13, 22, 53, 22, 65, DateTimeKind.Local).AddTicks(7657),
                            IsDeleted = false,
                            Name = "Filler & Botox",
                            Name_Ar = "فلر و بوتوكس",
                            Name_Ku = "فلر و بوتوكس"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AverageRating");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notification")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("OnlineReservationPercent");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PersonId");

                    b.Property<int>("PrePaymentPercent");

                    b.Property<long>("RankScore");

                    b.Property<int>("ReservationRangeEndPointDiffMinutes");

                    b.Property<int>("ReservationRangeEndPointPosition");

                    b.Property<int>("ReservationRangeStartPoint");

                    b.Property<int>("ReservationType");

                    b.Property<int>("ShiftCenterId");

                    b.Property<DateTime>("StartReservationDate");

                    b.Property<int?>("TotalRaters");

                    b.Property<double?>("TotalRating");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<long>("VisitPrice");

                    b.Property<string>("_Vocations")
                        .HasColumnName("Vocations");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("ServiceSupply");
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyInfo", b =>
                {
                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime>("AcceptionDate");

                    b.Property<string>("Bio")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Bio_Ar")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Bio_Ku")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MedicalCouncilNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Picture")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(255);

                    b.Property<float>("WorkExperience")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0f);

                    b.HasKey("ServiceSupplyId");

                    b.ToTable("ServiceSupplyInfo");
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<double>("Rating");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique()
                        .HasFilter("[AppointmentId] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("ServiceSupplyRating");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveDaysAhead");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<bool>("AutomaticScheduleEnabled");

                    b.Property<int>("BookingRestrictionHours");

                    b.Property<int?>("CityId");

                    b.Property<int?>("ClinicId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsIndependent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("KnownAsDoctorName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Point>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Notification")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_FcmInstanceIds")
                        .HasColumnName("FcmInstanceIds");

                    b.Property<string>("_Images")
                        .HasColumnName("Images");

                    b.Property<string>("_PhoneNumbers")
                        .HasColumnName("PhoneNumbers");

                    b.Property<string>("_Vocations")
                        .HasColumnName("Vocations");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClinicId");

                    b.ToTable("ShiftCenter");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("About");

                    b.Property<int>("AppointmentId");

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GettingStatusCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<long?>("MessageId");

                    b.Property<long?>("MessageStatus");

                    b.Property<int>("ReceiverPersonId");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<string>("SenderUserName");

                    b.Property<DateTime>("SendingDate");

                    b.Property<int>("SendingRetryCount");

                    b.Property<int>("ShiftCenterId");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ReceiverPersonId");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("ShiftCenterMessage");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterPersons", b =>
                {
                    b.Property<int>("ShiftCenterId");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPatient");

                    b.Property<string>("TempGeneratedPassword");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftCenterId", "PersonId");

                    b.HasAlternateKey("PersonId", "ShiftCenterId");

                    b.ToTable("ShiftCenterPersons");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("HealthServiceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ShiftCenterId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("HealthServiceId");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("ShiftCenterService");
                });

            modelBuilder.Entity("AN.Core.Domain.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DateStamp");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PageViewed");

                    b.Property<string>("Referer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent");

                    b.Property<string>("UserOs");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<string>("Problems")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Problems_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Problems_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<int>("ServiceSupplyId");

                    b.Property<string>("Treatments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Treatments_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Treatments_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("TreatmentHistory");
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentsItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CustomDrugName")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("CustomDrugName_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("CustomDrugName_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("DateStarted");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Dosage")
                        .HasMaxLength(5);

                    b.Property<int?>("DrugId");

                    b.Property<string>("Frequency")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50);

                    b.Property<int>("TreatmentHistoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("TreatmentHistoryId");

                    b.ToTable("TreatmentsItems");
                });

            modelBuilder.Entity("AN.Core.Domain.UsualScheduleInsurances", b =>
                {
                    b.Property<int>("ScheduleId");

                    b.Property<int>("InsuranceId");

                    b.Property<int>("AdmissionCapacity");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("ScheduleId", "InsuranceId");

                    b.HasAlternateKey("InsuranceId", "ScheduleId");

                    b.ToTable("UsualScheduleInsurances");
                });

            modelBuilder.Entity("AN.Core.Domain.UsualSchedulePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DayOfWeek");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTime>("ExpireDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaxCount");

                    b.Property<int>("Prerequisite");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("Shift");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime>("ValidFromDate");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.ToTable("UsualSchedulePlan");
                });

            modelBuilder.Entity("AN.Core.Domain.VocationDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DayOfWeek")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("VocationDay");
                });

            modelBuilder.Entity("AN.Core.Domain.AdditionalExpertise", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupplyInfo", "UserDoctorInfo")
                        .WithMany("AdditionalExpertises")
                        .HasForeignKey("UserDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Appointment", b =>
                {
                    b.HasOne("AN.Core.Domain.Offer", "Offer")
                        .WithMany("Appointments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.PatientInsurance", "PatientInsurance")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("Appointments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("Appointments")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.BlockedMobiles", b =>
                {
                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("BlockedMobiles")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.City", b =>
                {
                    b.HasOne("AN.Core.Domain.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Clinic", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("Clinics")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Hospital", "Hospital")
                        .WithMany("Clinics")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ClinicPersons", b =>
                {
                    b.HasOne("AN.Core.Domain.Clinic", "Clinic")
                        .WithMany("ClinicUsers")
                        .HasForeignKey("Clinic_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ClinicPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorActivityLog", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorExpertise", b =>
                {
                    b.HasOne("AN.Core.Domain.Expertise", "Expertise")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ScientificCategory", "ScientificCategory")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("ScientificCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupplyInfo", "UserDoctorInfo")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("UserDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DrugGroups", b =>
                {
                    b.HasOne("AN.Core.Domain.Drug", "Drug")
                        .WithMany("DrugGroups")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.PharmaceuticalGroup", "PharmaceuticalGroup")
                        .WithMany("DrugGroups")
                        .HasForeignKey("PharmaceuticalGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Expertise", b =>
                {
                    b.HasOne("AN.Core.Domain.ExpertiseCategory", "ExpertiseCategory")
                        .WithMany("Expertises")
                        .HasForeignKey("ExpertiseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Hospital", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.HospitalPersons", b =>
                {
                    b.HasOne("AN.Core.Domain.Hospital", "Hospital")
                        .WithMany("HospitalUsers")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("HospitalPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.IdentityUser", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("IdentityUsers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Offer", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Offers")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("Offers")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PatientInsurance", b =>
                {
                    b.HasOne("AN.Core.Domain.Insurance", "Insurance")
                        .WithMany("PatientInsurances")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.PatientPersonInfo", "UserPatientInfo")
                        .WithMany("PatientInsurances")
                        .HasForeignKey("UserPatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PatientPersonInfo", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithOne("PatientPersonInfo")
                        .HasForeignKey("AN.Core.Domain.PatientPersonInfo", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PaymentInfo", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("AN.Core.Domain.PaymentInfo", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Person", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Pharmacy", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("Pharmacies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Schedule", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Schedules")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("Schedules")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Service", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupply", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ServiceSupplies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("ServiceSupplies")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyInfo", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithOne("ServiceSupplyInfo")
                        .HasForeignKey("AN.Core.Domain.ServiceSupplyInfo", "ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyRating", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithOne("Rate")
                        .HasForeignKey("AN.Core.Domain.ServiceSupplyRating", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("Rates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Rates")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenter", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("ShiftCenters")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Clinic", "Clinic")
                        .WithMany("ShiftCenters")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterMessage", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithMany("ShiftCenterMessages")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "ReceiverPerson")
                        .WithMany("ShiftCenterMessages")
                        .HasForeignKey("ReceiverPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("PoliclinicMessages")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterPersons", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ShiftCenterPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("ShiftCenterUsers")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterService", b =>
                {
                    b.HasOne("AN.Core.Domain.Service", "Service")
                        .WithMany("ShiftCenterServices")
                        .HasForeignKey("HealthServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("PolyclinicHealthServices")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentHistory", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentsItems", b =>
                {
                    b.HasOne("AN.Core.Domain.Drug", "Drug")
                        .WithMany("TreatmentsItems")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.TreatmentHistory", "TreatmentHistory")
                        .WithMany("TreatmentsItems")
                        .HasForeignKey("TreatmentHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.UsualScheduleInsurances", b =>
                {
                    b.HasOne("AN.Core.Domain.Insurance", "Insurance")
                        .WithMany("UsualScheduleInsurances")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.UsualSchedulePlan", "UsualSchedulePlan")
                        .WithMany("UsualScheduleInsurances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.UsualSchedulePlan", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("UsualSchedulePlans")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("UsualSchedulePlans")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
