// <auto-generated />
using System;
using AN.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace AN.DAL.Migrations
{
    [DbContext(typeof(BanobatDbContext))]
    [Migration("20201025100958_AppointmentLang")]
    partial class AppointmentLang
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("an")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AN.Core.Domain.AdditionalExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserDoctorId");

                    b.HasKey("Id");

                    b.HasIndex("UserDoctorId");

                    b.ToTable("AdditionalExpertise");
                });

            modelBuilder.Entity("AN.Core.Domain.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Book_DateTime");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("End_DateTime");

                    b.Property<bool>("IsAnnounced");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OfferId");

                    b.Property<int?>("PatientInsuranceId");

                    b.Property<int>("Paymentstatus");

                    b.Property<int>("PersonId");

                    b.Property<int>("RequestLang");

                    b.Property<int>("ReservationChannel");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<DateTime>("Start_DateTime");

                    b.Property<int>("Status");

                    b.Property<string>("UniqueTrackingCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PatientInsuranceId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.HasIndex("UniqueTrackingCode")
                        .IsUnique();

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("AN.Core.Domain.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DeleteUrl")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("FileType");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<int>("Owner");

                    b.Property<int>("OwnerTableId");

                    b.Property<double>("Size");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AN.Core.Domain.BlockedIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlockedIp");
                });

            modelBuilder.Entity("AN.Core.Domain.BlockedMobiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ShiftCenterId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("BlockedMobiles");
                });

            modelBuilder.Entity("AN.Core.Domain.CenterPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<float?>("PatientVisitAge");

                    b.Property<float?>("PatientVisitHeight");

                    b.Property<float?>("PatientVisitWeight");

                    b.Property<int>("Status");

                    b.Property<int>("TreatmentHistoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_SonarNeedIds")
                        .HasColumnName("SonarNeedIds");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("TreatmentHistoryId");

                    b.ToTable("CenterPrescriptions");
                });

            modelBuilder.Entity("AN.Core.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("ProvinceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(1766),
                            IsDeleted = false,
                            Name = "Erbil",
                            Name_Ar = "اربیل",
                            Name_Ku = "هەولێر",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(1799),
                            IsDeleted = false,
                            Name = "Sulaymaniyah",
                            Name_Ar = "السلیمانیه",
                            Name_Ku = "سلێمانی",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(1802),
                            IsDeleted = false,
                            Name = "Dahuk",
                            Name_Ar = "دهوك",
                            Name_Ku = "دهۆک",
                            ProvinceId = 3
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("HospitalId");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGovernmental")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHostelry")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIndependent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Point>("Location");

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Notification")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_Images")
                        .HasColumnName("Images");

                    b.Property<string>("_PhoneNumbers")
                        .HasColumnName("PhoneNumbers");

                    b.Property<string>("_Vocations")
                        .HasColumnName("Vocations");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("AN.Core.Domain.ClinicPersons", b =>
                {
                    b.Property<int>("Clinic_Id");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TempGeneratedPassword");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Clinic_Id", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ClinicPersons");
                });

            modelBuilder.Entity("AN.Core.Domain.Consultancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("Consultancy");
                });

            modelBuilder.Entity("AN.Core.Domain.ConsultancyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultancyId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<int>("Sender");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConsultancyId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("ConsultancyMessage");
                });

            modelBuilder.Entity("AN.Core.Domain.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUnread")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Mobile")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("AN.Core.Domain.ContentArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsUnicode(true);

                    b.Property<string>("Body_Ar")
                        .IsUnicode(true);

                    b.Property<string>("Body_Ku")
                        .IsUnicode(true);

                    b.Property<int>("ContentCategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("ImageUrl_Ar")
                        .HasMaxLength(1000);

                    b.Property<string>("ImageUrl_Ku")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<int>("ReaderType");

                    b.Property<string>("Summary")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Summary_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Summary_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(1000);

                    b.Property<string>("ThumbnailUrl_Ar")
                        .HasMaxLength(1000);

                    b.Property<string>("ThumbnailUrl_Ku")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContentCategoryId");

                    b.ToTable("ContentArticle");
                });

            modelBuilder.Entity("AN.Core.Domain.ContentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LayoutStyle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContentCategory");
                });

            modelBuilder.Entity("AN.Core.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("CountryName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("AN.Core.Domain.DiseaseRecordsForm", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<long>("Age")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("DoYouSmoke")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("DrugsYouUsed")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("HadSurgery")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("HasLongTermDisease")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LongTermDiseasesDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("MedicalAllergies")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("SurgeriesDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId");

                    b.ToTable("DiseaseRecordsForm");
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("DoctorActivityLog");
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorExpertise", b =>
                {
                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("ExpertiseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ScientificCategoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceSupplyId", "ExpertiseId");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("ScientificCategoryId");

                    b.ToTable("DoctorExpertise");
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorScientificCategory", b =>
                {
                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("ScientificCategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceSupplyId", "ScientificCategoryId");

                    b.HasIndex("ScientificCategoryId");

                    b.ToTable("DoctorScientificCategory");
                });

            modelBuilder.Entity("AN.Core.Domain.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATCCode1");

                    b.Property<string>("ATCCode2");

                    b.Property<string>("ConsumptionTypes")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("ConsumptionTypes_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("ConsumptionTypes_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DosageForm");

                    b.Property<string>("EffectMechanism")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("EffectMechanism_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("EffectMechanism_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("GenericName_Ar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("GenericName_Ku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LegalStatus");

                    b.Property<string>("PackageSize");

                    b.Property<string>("PackageType");

                    b.Property<string>("RouteOfAdministration");

                    b.Property<string>("ShelfLifeInMonth");

                    b.Property<string>("SideEffects")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("SideEffects_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("SideEffects_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("StorageConditions");

                    b.Property<string>("StrengthVaue");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("UnitOfStrength");

                    b.Property<string>("UnitOfVolume");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Volume");

                    b.HasKey("Id");

                    b.ToTable("Drug");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(8399),
                            GenericName = "Amoxil",
                            GenericName_Ar = "Amoxil",
                            GenericName_Ku = "Amoxil",
                            IsDeleted = false,
                            TradeName = "Amoxicillin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 315, DateTimeKind.Local).AddTicks(679),
                            GenericName = "Neurontin",
                            GenericName_Ar = "Neurontin",
                            GenericName_Ku = "Neurontin",
                            IsDeleted = false,
                            TradeName = "Gabapentin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 315, DateTimeKind.Local).AddTicks(697),
                            GenericName = "Motrin",
                            GenericName_Ar = "Motrin",
                            GenericName_Ku = "Motrin",
                            IsDeleted = false,
                            TradeName = "Ibuprofen"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.DrugGroups", b =>
                {
                    b.Property<int>("PharmaceuticalGroupId");

                    b.Property<int>("DrugId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PharmaceuticalGroupId", "DrugId");

                    b.HasAlternateKey("DrugId", "PharmaceuticalGroupId");

                    b.ToTable("DrugGroups");
                });

            modelBuilder.Entity("AN.Core.Domain.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Controller")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Parameters")
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("AN.Core.Domain.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("ExpertiseCategoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseCategoryId");

                    b.ToTable("Expertise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(7076),
                            Description_Ku = "شارەزای بوواری منداڵان",
                            ExpertiseCategoryId = 1,
                            IsDeleted = false,
                            Name = "Kids Specialist",
                            Name_Ar = "خبرة الأطفال",
                            Name_Ku = "شارەزای بوواری منداڵان"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(7101),
                            Description_Ku = "شارەزای دڵ",
                            ExpertiseCategoryId = 2,
                            IsDeleted = false,
                            Name = "Heart Specialist",
                            Name_Ar = "أخصائي القلب",
                            Name_Ku = "شارەزای دڵ"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.ExpertiseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExpertiseCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(2746),
                            Description_Ku = "شارەزای منداڵان",
                            IsDeleted = false,
                            Name = "Kids",
                            Name_Ar = "الأطفال",
                            Name_Ku = "منداڵان"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(4575),
                            Description_Ku = "شارەزای دڵ",
                            IsDeleted = false,
                            Name = "Heart",
                            Name_Ar = "قلب",
                            Name_Ku = "دڵ"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGovernmental")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Point>("Location");

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Notification")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_PhoneNumbers")
                        .HasColumnName("PhoneNumbers");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("AN.Core.Domain.HospitalPersons", b =>
                {
                    b.Property<int>("HospitalId");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TempGeneratedPassword");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("HospitalId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("HospitalPersons");
                });

            modelBuilder.Entity("AN.Core.Domain.IdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("AN.Core.Domain.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("AN.Core.Domain.InsuranceBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InsuranceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Point>("Location");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceBranch");
                });

            modelBuilder.Entity("AN.Core.Domain.InsuranceService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("HasAttachments");

                    b.Property<int>("InsuranceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Photo");

                    b.Property<string>("Summary")
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<string>("Summary_Ar")
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<string>("Summary_Ku")
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ar")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ku")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceService");
                });

            modelBuilder.Entity("AN.Core.Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("AN.Core.Domain.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CustomServiceName")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("InvoiceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int?>("ShiftCenterCerviceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ShiftCenterCerviceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("AN.Core.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Image");

                    b.Property<string>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsNeedToBeSeen");

                    b.Property<bool>("IsSeen");

                    b.Property<string>("PayloadJson");

                    b.Property<int?>("PersonId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Text_Ar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Text_Ku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AN.Core.Domain.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurrencyType");

                    b.Property<decimal?>("CurrentPrice")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<double?>("DiscountPercentange");

                    b.Property<DateTime?>("EndDateTime");

                    b.Property<DateTime>("ExpiredAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MaxCount");

                    b.Property<string>("NotificationBody")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("NotificationBody_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("NotificationBody_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("NotificationTitle")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("NotificationTitle_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("NotificationTitle_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Photo")
                        .IsRequired();

                    b.Property<string>("Photo_Ar");

                    b.Property<string>("Photo_Ku");

                    b.Property<int?>("RemainedCount");

                    b.Property<bool>("SendNotification")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int?>("ShiftCenterServiceId");

                    b.Property<bool>("ShowDiscountBanner");

                    b.Property<DateTime>("StartAt");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<int>("Status");

                    b.Property<string>("Summary")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Summary_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Summary_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ar")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Title_Ku")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("VisitsCount");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("AN.Core.Domain.PastMedicalHistory", b =>
                {
                    b.Property<int>("TreatmentHistoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DifferentialDiagnosis")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("DrugHistory")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("ExaminationHistory")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("FamilyHistory")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("FinalDiagnosis")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PastMedical")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("PresentIllness")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("SignsAndSymptomsHistory")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("SocialHistory")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("SurgicalHistory")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("SystemicReview")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentHistoryId");

                    b.ToTable("PastMedicalHistory");
                });

            modelBuilder.Entity("AN.Core.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<int?>("ServiceSupplyId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("AN.Core.Domain.PatientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("InsuranceNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceSupplyInsuranceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserPatientId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyInsuranceId");

                    b.HasIndex("UserPatientId");

                    b.ToTable("PatientInsurance");
                });

            modelBuilder.Entity("AN.Core.Domain.PatientPersonInfo", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FreeTurnsCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonId");

                    b.ToTable("PatientPersonInfo");
                });

            modelBuilder.Entity("AN.Core.Domain.PaymentInfo", b =>
                {
                    b.Property<int>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrderId")
                        .IsUnicode(true);

                    b.Property<decimal>("Price");

                    b.Property<long>("SaleOrderId");

                    b.Property<long>("SaleReferenceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.ToTable("PaymentInfo");
                });

            modelBuilder.Entity("AN.Core.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<float?>("Age");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Birthdate");

                    b.Property<int?>("BloodType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreationPlaceId");

                    b.Property<int?>("CreatorRole");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FirstName_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FirstName_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Gender");

                    b.Property<float?>("Height");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(50);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmployee");

                    b.Property<int?>("Language");

                    b.Property<int?>("MarriageStatus");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("MobileConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("NamePrefix")
                        .HasMaxLength(20);

                    b.Property<int?>("ParentId");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SecondName_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SecondName_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ThirdName_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ThirdName_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("UniqueId")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Weight");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50);

                    b.Property<string>("_FcmInstanceIds");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasFilter("[UniqueId] IS NOT NULL");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("AN.Core.Domain.PharmaceuticalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable(" PharmaceuticalGroup");
                });

            modelBuilder.Entity("AN.Core.Domain.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Avatar");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<Point>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_Images")
                        .HasColumnName("Images");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("AN.Core.Domain.PharmacyDoneTreatments", b =>
                {
                    b.Property<int>("TreatmentId");

                    b.Property<int>("PharmacyPrescriptionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentId", "PharmacyPrescriptionId");

                    b.HasIndex("PharmacyPrescriptionId");

                    b.ToTable("PharmacyDoneTreatments");
                });

            modelBuilder.Entity("AN.Core.Domain.PharmacyPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<float?>("PatientVisitAge");

                    b.Property<float?>("PatientVisitHeight");

                    b.Property<float?>("PatientVisitWeight");

                    b.Property<int>("PharmacyId");

                    b.Property<int>("Status");

                    b.Property<int>("TreatmentHistoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("TreatmentHistoryId");

                    b.ToTable("PharmacyPrescriptions");
                });

            modelBuilder.Entity("AN.Core.Domain.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 312, DateTimeKind.Local).AddTicks(4121),
                            IsDeleted = false,
                            Name = "Erbil",
                            Name_Ar = "اربیل",
                            Name_Ku = "هەولێر"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 312, DateTimeKind.Local).AddTicks(4820),
                            IsDeleted = false,
                            Name = "Sulaymaniyah",
                            Name_Ar = "السلیمانیه",
                            Name_Ku = "سلێمانی"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 312, DateTimeKind.Local).AddTicks(4823),
                            IsDeleted = false,
                            Name = "Dahuk",
                            Name_Ar = "دهوك",
                            Name_Ku = "دهۆک"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Downloads");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Key");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("AN.Core.Domain.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("End_DateTime");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaxCount");

                    b.Property<int>("Prerequisite");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("Shift");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<DateTime>("Start_DateTime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("AN.Core.Domain.ScheduleInsurance", b =>
                {
                    b.Property<int>("ScheduleId");

                    b.Property<int>("ServiceSupplyInsuranceId");

                    b.Property<int>("AdmissionCapacity");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("ScheduleId", "ServiceSupplyInsuranceId");

                    b.HasIndex("ServiceSupplyInsuranceId");

                    b.ToTable("ScheduleInsurance");
                });

            modelBuilder.Entity("AN.Core.Domain.ScientificCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ScientificCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(9286),
                            Description_Ku = "",
                            IsDeleted = false,
                            Name = "General",
                            Name_Ar = "عام",
                            Name_Ku = "گشتی"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(1653),
                            Description_Ku = "",
                            IsDeleted = false,
                            Name = "Specialist",
                            Name_Ar = "اختصاصی",
                            Name_Ku = "شارەزا"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 314, DateTimeKind.Local).AddTicks(1669),
                            Description_Ku = "",
                            IsDeleted = false,
                            Name = "Expertise",
                            Name_Ar = "ماجیستر",
                            Name_Ku = "ماستەر"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("ServiceCategoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7543),
                            IsDeleted = false,
                            Name = "Visit",
                            Name_Ar = "يزور",
                            Name_Ku = "ڤیزیت",
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7784),
                            IsDeleted = false,
                            Name = "Hydrofacial",
                            Name_Ar = "الهايدرا فيشيل",
                            Name_Ku = "Hydrofacial",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7786),
                            IsDeleted = false,
                            Name = "Scarlet",
                            Name_Ar = "سكارليت",
                            Name_Ku = "Scarlet",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7788),
                            IsDeleted = false,
                            Name = "Hypho",
                            Name_Ar = "هايفو",
                            Name_Ku = "Hypho",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7789),
                            IsDeleted = false,
                            Name = "PRP",
                            Name_Ar = "بلازما - PRP",
                            Name_Ku = "PRP",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7792),
                            IsDeleted = false,
                            Name = "Mesotherapy",
                            Name_Ar = "بلازماميزو",
                            Name_Ku = "Mesotherapy",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7793),
                            IsDeleted = false,
                            Name = "Thread face lifting",
                            Name_Ar = "شد الوجه بالخيوط",
                            Name_Ku = "هەڵگرتنی مووی دەمو چاو",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7795),
                            IsDeleted = false,
                            Name = "Eyebrow lifting",
                            Name_Ar = "رفع الحاجب",
                            Name_Ku = "برۆ کردن",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7796),
                            IsDeleted = false,
                            Name = "Pigmentation treatment",
                            Name_Ar = "علاج التصبغات",
                            Name_Ku = "Pigmentation treatment",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7798),
                            IsDeleted = false,
                            Name = "Acne & acne scar management",
                            Name_Ar = "علاج ندبات حب الشباب",
                            Name_Ku = "Acne & acne scar management",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7799),
                            IsDeleted = false,
                            Name = "Nose reconstruction",
                            Name_Ar = "عملية تجميل الأنف",
                            Name_Ku = "Nose reconstruction",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7801),
                            IsDeleted = false,
                            Name = "Nevus removal",
                            Name_Ar = "إزالة الشامة",
                            Name_Ku = "Nevus removal",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7803),
                            IsDeleted = false,
                            Name = "Carbon laser",
                            Name_Ar = "ليزر كربوني",
                            Name_Ku = "Carbon laser",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7804),
                            IsDeleted = false,
                            Name = "Eyebrow tatoo",
                            Name_Ar = "تاتو الحواجب",
                            Name_Ku = "تاتۆی برۆ",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7806),
                            IsDeleted = false,
                            Name = "face Adjustments",
                            Name_Ar = "تعديل الوجه",
                            Name_Ku = "face Adjustments",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7808),
                            IsDeleted = false,
                            Name = "Eyebrow Extention",
                            Name_Ar = "إكستنشن الرموش ",
                            Name_Ku = "ئێکستێنشنی برۆ",
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7832),
                            IsDeleted = false,
                            Name = "Full makeup",
                            Name_Ar = "مكياج سهرة/ ثقيل",
                            Name_Ku = "مکیاج کامل",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7834),
                            IsDeleted = false,
                            Name = "Simple makeup",
                            Name_Ar = "مكياج ناعم",
                            Name_Ku = "مکیاجی سادە",
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7846),
                            IsDeleted = false,
                            Name = "Sculpture",
                            Name_Ar = "نحت الجسم",
                            Name_Ku = "Sculpture",
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7848),
                            IsDeleted = false,
                            Name = "Body contouring",
                            Name_Ar = "Body contouring",
                            Name_Ku = "Body contouring",
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7858),
                            IsDeleted = false,
                            Name = "Keratin",
                            Name_Ar = "كرياتين",
                            Name_Ku = "کیراتین",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7860),
                            IsDeleted = false,
                            Name = "Mask",
                            Name_Ar = "ماسك",
                            Name_Ku = "ماسک",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7862),
                            IsDeleted = false,
                            Name = "Hair falling treatment",
                            Name_Ar = "علاج تساقط الشعر",
                            Name_Ku = "چارەسەری قژ وەرین",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7864),
                            IsDeleted = false,
                            Name = "Hair transplant",
                            Name_Ar = "زرع الشعر",
                            Name_Ku = "چاندنی پرچ",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7865),
                            IsDeleted = false,
                            Name = "Hair extension",
                            Name_Ar = "إكستنشن الشعر",
                            Name_Ku = "ئیکستێنشن",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7867),
                            IsDeleted = false,
                            Name = "Dye",
                            Name_Ar = "صبغ",
                            Name_Ku = "ڕەنگ کردن",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7868),
                            IsDeleted = false,
                            Name = "Hair Styling",
                            Name_Ar = "تسريحة شعر",
                            Name_Ku = "ڕازاندنەوەی قژ",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7870),
                            IsDeleted = false,
                            Name = "Hair root dye",
                            Name_Ar = "صبغ اطراف الشعر",
                            Name_Ku = "ڕەنگ کردنی ڕیشەی قژ",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7871),
                            IsDeleted = false,
                            Name = "Cutting",
                            Name_Ar = "قص شعر",
                            Name_Ku = "قژ بڕین",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7873),
                            IsDeleted = false,
                            Name = "سشوار",
                            Name_Ar = "سشوار",
                            Name_Ku = "سێشوار",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7875),
                            IsDeleted = false,
                            Name = "موهير",
                            Name_Ar = "موهير",
                            Name_Ku = "موهير",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7877),
                            IsDeleted = false,
                            Name = "اونبرة",
                            Name_Ar = "اونبرة",
                            Name_Ku = "ئۆمبر",
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7889),
                            IsDeleted = false,
                            Name = "Full body",
                            Name_Ar = "كامل الجسم",
                            Name_Ku = "تەواوی لەش",
                            ServiceCategoryId = 6
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7891),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "دەمو چاو",
                            ServiceCategoryId = 6
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7902),
                            IsDeleted = false,
                            Name = "Manicure",
                            Name_Ar = "منيكير",
                            Name_Ku = "مانیکیور",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7904),
                            IsDeleted = false,
                            Name = "Pedicure",
                            Name_Ar = "بديكير",
                            Name_Ku = "پێدیکیور",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7905),
                            IsDeleted = false,
                            Name = "Gel",
                            Name_Ar = "جلّ الأظافر",
                            Name_Ku = "جێل",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7927),
                            IsDeleted = false,
                            Name = "Acrylic",
                            Name_Ar = "آكريليك",
                            Name_Ku = "ئاکریلیک",
                            ServiceCategoryId = 7
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7939),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "Face",
                            ServiceCategoryId = 8
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7941),
                            IsDeleted = false,
                            Name = "Body",
                            Name_Ar = "الجسم",
                            Name_Ku = "Body",
                            ServiceCategoryId = 8
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7952),
                            IsDeleted = false,
                            Name = "Complete examination",
                            Name_Ar = "Complete examination",
                            Name_Ku = "پشکنینی گشتی",
                            ServiceCategoryId = 9
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7954),
                            IsDeleted = false,
                            Name = "Dental cleanings",
                            Name_Ar = "Dental cleanings",
                            Name_Ku = "خاوێن کردنەوەی ددان",
                            ServiceCategoryId = 9
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7955),
                            IsDeleted = false,
                            Name = "Visit",
                            Name_Ar = "يزور",
                            Name_Ku = "ڤیزیت",
                            ServiceCategoryId = 9
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7965),
                            IsDeleted = false,
                            Name = "Thread face lifting",
                            Name_Ar = "شد الوجه بالخيوط",
                            Name_Ku = "Thread face lifting",
                            ServiceCategoryId = 10
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7967),
                            IsDeleted = false,
                            Name = "Eyebrow lifting",
                            Name_Ar = "رفع الحاجب",
                            Name_Ku = "Eyebrow lifting",
                            ServiceCategoryId = 10
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7969),
                            IsDeleted = false,
                            Name = "Eyebrow tatoo",
                            Name_Ar = "تاتو الحواجب",
                            Name_Ku = "Eyebrow tatoo ",
                            ServiceCategoryId = 10
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7970),
                            IsDeleted = false,
                            Name = "Eyebrow Extention",
                            Name_Ar = "إكستنشن الرموش ",
                            Name_Ku = "Eyebrow Extention",
                            ServiceCategoryId = 10
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7980),
                            IsDeleted = false,
                            Name = "Full makeup",
                            Name_Ar = "مكياج سهرة/ ثقيل",
                            Name_Ku = "Full makeup",
                            ServiceCategoryId = 11
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7982),
                            IsDeleted = false,
                            Name = "Simple makeup",
                            Name_Ar = "مكياج ناعم",
                            Name_Ku = "Simple makeup",
                            ServiceCategoryId = 11
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7984),
                            IsDeleted = false,
                            Name = "Brides' makeup",
                            Name_Ar = "مكياج عروس",
                            Name_Ku = "مکیاجی بووک",
                            ServiceCategoryId = 11
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7994),
                            IsDeleted = false,
                            Name = "Keratin",
                            Name_Ar = "كرياتين",
                            Name_Ku = "کیراتین",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7996),
                            IsDeleted = false,
                            Name = "Mask",
                            Name_Ar = "ماسك",
                            Name_Ku = "ماسک",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7998),
                            IsDeleted = false,
                            Name = "Hair falling treatment",
                            Name_Ar = "علاج تساقط الشعر",
                            Name_Ku = "چارەسەری قژ وەرین",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(7999),
                            IsDeleted = false,
                            Name = "Hair transplant",
                            Name_Ar = "زرع الشعر",
                            Name_Ku = "چاندنی پرچ",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8001),
                            IsDeleted = false,
                            Name = "Hair extension",
                            Name_Ar = "إكستنشن الشعر",
                            Name_Ku = "ئیکستێنشن",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8003),
                            IsDeleted = false,
                            Name = "Dye",
                            Name_Ar = "صبغ",
                            Name_Ku = "ڕەنگ کردن",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8005),
                            IsDeleted = false,
                            Name = "Hair Styling",
                            Name_Ar = "تسريحة شعر",
                            Name_Ku = "ڕازاندنەوەی قژ",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8006),
                            IsDeleted = false,
                            Name = "Hair root dye",
                            Name_Ar = "صبغ اطراف الشعر",
                            Name_Ku = "ڕەنگ کردنی ڕیشەی قژ",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8008),
                            IsDeleted = false,
                            Name = "Cutting",
                            Name_Ar = "قص شعر",
                            Name_Ku = "قژ بڕین",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8010),
                            IsDeleted = false,
                            Name = "Hairdrying",
                            Name_Ar = "سشوار",
                            Name_Ku = "سێشوار",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8011),
                            IsDeleted = false,
                            Name = "Acrylic/Mohair",
                            Name_Ar = "موهير",
                            Name_Ku = "موهير",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8013),
                            IsDeleted = false,
                            Name = "Ombre",
                            Name_Ar = "اونبرة",
                            Name_Ku = "ئۆمبر",
                            ServiceCategoryId = 12
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8024),
                            IsDeleted = false,
                            Name = "Full body",
                            Name_Ar = "كامل الجسم",
                            Name_Ku = "تەواوی لەش",
                            ServiceCategoryId = 13
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8026),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "دەمو چاو",
                            ServiceCategoryId = 13
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8036),
                            IsDeleted = false,
                            Name = "Manicure",
                            Name_Ar = "منيكير",
                            Name_Ku = "مانیکیور",
                            ServiceCategoryId = 14
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8037),
                            IsDeleted = false,
                            Name = "Pedicure",
                            Name_Ar = "بديكير",
                            Name_Ku = "پێدیکیور",
                            ServiceCategoryId = 14
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8039),
                            IsDeleted = false,
                            Name = "Gel",
                            Name_Ar = "جلّ الأظافر",
                            Name_Ku = "جێل",
                            ServiceCategoryId = 14
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8041),
                            IsDeleted = false,
                            Name = "Acrylic",
                            Name_Ar = "آكريليك",
                            Name_Ku = "ئاکریلیک",
                            ServiceCategoryId = 14
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8052),
                            IsDeleted = false,
                            Name = "Visit",
                            Name_Ar = "زیارة العیادة",
                            Name_Ku = "سەردان کردن",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8054),
                            IsDeleted = false,
                            Name = "Diet Clinic",
                            Name_Ar = "کلینیک نظام الغذائي",
                            Name_Ku = "کلینیکی پارێز کردن",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8075),
                            IsDeleted = false,
                            Name = "Intermittent Fasting Diet",
                            Name_Ar = "نطام الغذائي صوم المتقطع",
                            Name_Ku = "ڕێجیمی پچڕ پچڕ",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8076),
                            IsDeleted = false,
                            Name = "No Deprivation Diet",
                            Name_Ar = "نطام الغذائي بدون حرمان",
                            Name_Ku = "ڕێجیمی بێ نەقس",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8078),
                            IsDeleted = false,
                            Name = "Lifestyle Diets",
                            Name_Ar = "نطام الغذائي أنماط الحیاة",
                            Name_Ku = "ڕێجیمی شێوازی ژیان",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8079),
                            IsDeleted = false,
                            Name = "Atkins Diet",
                            Name_Ar = "نطام الغذائي آتکینز",
                            Name_Ku = "ڕێجیمی ئاتکینز",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8081),
                            IsDeleted = false,
                            Name = "Dukan Diet",
                            Name_Ar = "نطام الغذائي دوکان",
                            Name_Ku = "ڕێجیمی دوکان",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8083),
                            IsDeleted = false,
                            Name = "Keto Diet",
                            Name_Ar = "نطام الغذائي کیتو",
                            Name_Ku = "ڕێجیمی کیتۆ",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8084),
                            IsDeleted = false,
                            Name = "Ketogenic Diet Plan",
                            Name_Ar = "خطة نطام الغذائي کیتوجنیک",
                            Name_Ku = "پلانی ڕێجیمی کیتۆجێنیک",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8086),
                            IsDeleted = false,
                            Name = "Stevia",
                            Name_Ar = "ستیڤیا",
                            Name_Ku = "ستێڤیا",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8087),
                            IsDeleted = false,
                            Name = "Healthy Lifestyle",
                            Name_Ar = "أنماط الحیاة صحي",
                            Name_Ku = "شێوازی ژیانی تەندروست",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8089),
                            IsDeleted = false,
                            Name = "Nutrition Consultation",
                            Name_Ar = "مشاورة التغذیة",
                            Name_Ku = "ڕاوێژی خۆراک",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8090),
                            IsDeleted = false,
                            Name = "Body Composition Analyzing",
                            Name_Ar = "تحلیل ترکیب الجسم",
                            Name_Ku = "شیکردنەوەی پێکهاتەی لەش",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8092),
                            IsDeleted = false,
                            Name = "Sugar free",
                            Name_Ar = "بدون سکر",
                            Name_Ku = "خاڵی لە شەکر",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8093),
                            IsDeleted = false,
                            Name = "Lactose Free",
                            Name_Ar = "بدون لاکتوز",
                            Name_Ku = "خاڵی لە لەکتۆز",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8095),
                            IsDeleted = false,
                            Name = "Gluten Free",
                            Name_Ar = "بدون غلوتین",
                            Name_Ku = "خاڵی لە گلوتین/پێزە",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8097),
                            IsDeleted = false,
                            Name = "Hemiplegia treatment",
                            Name_Ar = "علاج فالج",
                            Name_Ku = "چارەسەری ئیفلیجی",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 86,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8098),
                            IsDeleted = false,
                            Name = "Children's hemiplegia treatment",
                            Name_Ar = "علاج فالج الأطفال",
                            Name_Ku = "چارەسەری ئیفلیجی منداڵان",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 87,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8100),
                            IsDeleted = false,
                            Name = "Spinal cord dislocation",
                            Name_Ar = "خلع النخاع",
                            Name_Ku = "لە جێ دەرچوونی بڕبڕەی پشت",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 88,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8101),
                            IsDeleted = false,
                            Name = "Joint dislocation",
                            Name_Ar = "خلع المفاصل",
                            Name_Ku = "لە جێ دەرچوونی جومگە",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 89,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8103),
                            IsDeleted = false,
                            Name = "Physiotherapy",
                            Name_Ar = "العلاج الطبیعي",
                            Name_Ku = "چارەسەری سروشتی",
                            ServiceCategoryId = 15
                        },
                        new
                        {
                            Id = 90,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(8104),
                            IsDeleted = false,
                            Name = "Speaking problems",
                            Name_Ar = "مشاکل التکلم",
                            Name_Ku = "گرفتەکانی قسە کردن",
                            ServiceCategoryId = 15
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Photo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterType = 0,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4748),
                            IsDeleted = false,
                            Name = "Health",
                            Name_Ar = "الصحة",
                            Name_Ku = "تەندروستی"
                        },
                        new
                        {
                            Id = 2,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4774),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "دەموچاو"
                        },
                        new
                        {
                            Id = 3,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4776),
                            IsDeleted = false,
                            Name = "Makeup",
                            Name_Ar = "مكياج",
                            Name_Ku = "مكياج"
                        },
                        new
                        {
                            Id = 4,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4778),
                            IsDeleted = false,
                            Name = "Body",
                            Name_Ar = "الجسم",
                            Name_Ku = "جەستە"
                        },
                        new
                        {
                            Id = 5,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4779),
                            IsDeleted = false,
                            Name = "Hair",
                            Name_Ar = "الشعر",
                            Name_Ku = "پرچ"
                        },
                        new
                        {
                            Id = 6,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4781),
                            IsDeleted = false,
                            Name = "Laser",
                            Name_Ar = "ليزر",
                            Name_Ku = "لەیز‌ەر"
                        },
                        new
                        {
                            Id = 7,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4784),
                            IsDeleted = false,
                            Name = "Nail",
                            Name_Ar = "الأضافر",
                            Name_Ku = "نینۆک"
                        },
                        new
                        {
                            Id = 8,
                            CenterType = 1,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4785),
                            IsDeleted = false,
                            Name = "Filler & Botox",
                            Name_Ar = "فلر و بوتوكس",
                            Name_Ku = "فلر و بوتوكس"
                        },
                        new
                        {
                            Id = 9,
                            CenterType = 2,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4787),
                            IsDeleted = false,
                            Name = "Dentist",
                            Name_Ar = "Dentist",
                            Name_Ku = "ددان"
                        },
                        new
                        {
                            Id = 10,
                            CenterType = 11,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4789),
                            IsDeleted = false,
                            Name = "Face",
                            Name_Ar = "الوجه",
                            Name_Ku = "دەموچاو"
                        },
                        new
                        {
                            Id = 11,
                            CenterType = 11,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4791),
                            IsDeleted = false,
                            Name = "Makeup",
                            Name_Ar = "مكياج",
                            Name_Ku = "مكياج"
                        },
                        new
                        {
                            Id = 12,
                            CenterType = 11,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4792),
                            IsDeleted = false,
                            Name = "Hair",
                            Name_Ar = "الشعر",
                            Name_Ku = "پرچ"
                        },
                        new
                        {
                            Id = 13,
                            CenterType = 11,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4794),
                            IsDeleted = false,
                            Name = "Laser",
                            Name_Ar = "ليزر",
                            Name_Ku = "لەیز‌ەر"
                        },
                        new
                        {
                            Id = 14,
                            CenterType = 11,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4796),
                            IsDeleted = false,
                            Name = "Nail",
                            Name_Ar = "الأضافر",
                            Name_Ku = "نینۆک"
                        },
                        new
                        {
                            Id = 15,
                            CenterType = 4,
                            CreatedAt = new DateTime(2020, 10, 25, 13, 9, 57, 313, DateTimeKind.Local).AddTicks(4797),
                            IsDeleted = false,
                            Name = "Healthy Lifestyle",
                            Name_Ar = "أنماط الحیاة صحي",
                            Name_Ku = "سەنتەری تەندروستی"
                        });
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AverageRating");

                    b.Property<bool>("ConsultancyEnabled");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notification")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("OnlineReservationPercent");

                    b.Property<int>("PaymentType");

                    b.Property<int>("PersonId");

                    b.Property<int>("PrePaymentPercent");

                    b.Property<string>("PrescriptionPath")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<long>("RankScore");

                    b.Property<int>("ReservationRangeEndPointDiffMinutes");

                    b.Property<int>("ReservationRangeEndPointPosition");

                    b.Property<int>("ReservationRangeStartPoint");

                    b.Property<int>("ReservationType");

                    b.Property<int>("ShiftCenterId");

                    b.Property<DateTime>("StartReservationDate");

                    b.Property<int?>("TotalRaters");

                    b.Property<double?>("TotalRating");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<long>("VisitPrice");

                    b.Property<string>("_Vocations")
                        .HasColumnName("Vocations");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("ServiceSupply");
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyInfo", b =>
                {
                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime>("AcceptionDate");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Bio_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Bio_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MedicalCouncilNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Picture")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(255);

                    b.Property<float>("WorkExperience")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0f);

                    b.HasKey("ServiceSupplyId");

                    b.ToTable("ServiceSupplyInfo");
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InsuranceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("ServiceSupplyInsurance");
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<double>("Rating");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique()
                        .HasFilter("[AppointmentId] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceSupplyId");

                    b.ToTable("ServiceSupplyRating");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveDaysAhead");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Address_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("AutomaticScheduleEnabled");

                    b.Property<int>("BookingRestrictionHours");

                    b.Property<int?>("CityId");

                    b.Property<int?>("ClinicId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ar")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookMessage_Ku")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ar")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FinalBookSMSMessage_Ku")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsIndependent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("KnownAsDoctorName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Point>("Location");

                    b.Property<string>("Logo")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Name_Ku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Notification")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Notification_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("PrescriptionPath")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("ShowInHealthBank")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("SupportAppointments")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_FcmInstanceIds")
                        .HasColumnName("FcmInstanceIds");

                    b.Property<string>("_Images")
                        .HasColumnName("Images");

                    b.Property<string>("_PhoneNumbers")
                        .HasColumnName("PhoneNumbers");

                    b.Property<string>("_Vocations")
                        .HasColumnName("Vocations");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClinicId");

                    b.ToTable("ShiftCenter");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("About");

                    b.Property<int>("AppointmentId");

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GettingStatusCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<long?>("MessageId");

                    b.Property<long?>("MessageStatus");

                    b.Property<int>("ReceiverPersonId");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<string>("SenderUserName");

                    b.Property<DateTime>("SendingDate");

                    b.Property<int>("SendingRetryCount");

                    b.Property<int>("ShiftCenterId");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ReceiverPersonId");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("ShiftCenterMessage");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterPersons", b =>
                {
                    b.Property<int>("ShiftCenterId");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPatient");

                    b.Property<string>("TempGeneratedPassword");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftCenterId", "PersonId");

                    b.HasAlternateKey("PersonId", "ShiftCenterId");

                    b.ToTable("ShiftCenterPersons");
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurrencyType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("HealthServiceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Note_Ar")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Note_Ku")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceWithDiscount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("ShiftCenterId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("HealthServiceId");

                    b.HasIndex("ShiftCenterId");

                    b.ToTable("ShiftCenterService");
                });

            modelBuilder.Entity("AN.Core.Domain.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DateStamp");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PageViewed");

                    b.Property<string>("Referer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent");

                    b.Property<string>("UserOs");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PatientId");

                    b.Property<string>("Problems")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Problems_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Problems_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Treatments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Treatments_Ar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Treatments_Ku")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentHistory");
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentsItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CustomDrugName")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("CustomDrugName_Ar")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("CustomDrugName_Ku")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime>("DateStarted");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ar")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Description_Ku")
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<string>("Dosage")
                        .HasMaxLength(5);

                    b.Property<int?>("DrugId");

                    b.Property<string>("Frequency")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50);

                    b.Property<int>("TreatmentHistoryId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("TreatmentHistoryId");

                    b.ToTable("TreatmentsItems");
                });

            modelBuilder.Entity("AN.Core.Domain.UsualScheduleInsurances", b =>
                {
                    b.Property<int>("ScheduleId");

                    b.Property<int>("ServiceSupplyInsuranceId");

                    b.Property<int>("AdmissionCapacity");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("ScheduleId", "ServiceSupplyInsuranceId");

                    b.HasIndex("ServiceSupplyInsuranceId");

                    b.ToTable("UsualScheduleInsurances");
                });

            modelBuilder.Entity("AN.Core.Domain.UsualSchedulePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DayOfWeek");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTime>("ExpireDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaxCount");

                    b.Property<int>("Prerequisite");

                    b.Property<int>("ServiceSupplyId");

                    b.Property<int>("Shift");

                    b.Property<int>("ShiftCenterServiceId");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<DateTime>("ValidFromDate");

                    b.HasKey("Id");

                    b.HasIndex("ServiceSupplyId");

                    b.HasIndex("ShiftCenterServiceId");

                    b.ToTable("UsualSchedulePlan");
                });

            modelBuilder.Entity("AN.Core.Domain.VocationDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DayOfWeek")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("VocationDay");
                });

            modelBuilder.Entity("AN.Core.Domain.AdditionalExpertise", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupplyInfo", "UserDoctorInfo")
                        .WithMany("AdditionalExpertises")
                        .HasForeignKey("UserDoctorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Appointment", b =>
                {
                    b.HasOne("AN.Core.Domain.Offer", "Offer")
                        .WithMany("Appointments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.PatientInsurance", "PatientInsurance")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("Appointments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("Appointments")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.BlockedMobiles", b =>
                {
                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("BlockedMobiles")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.CenterPrescription", b =>
                {
                    b.HasOne("AN.Core.Domain.ShiftCenter", "Center")
                        .WithMany("Prescriptions")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.TreatmentHistory", "TreatmentHistory")
                        .WithMany("Prescriptions")
                        .HasForeignKey("TreatmentHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.City", b =>
                {
                    b.HasOne("AN.Core.Domain.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Clinic", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("Clinics")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Hospital", "Hospital")
                        .WithMany("Clinics")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ClinicPersons", b =>
                {
                    b.HasOne("AN.Core.Domain.Clinic", "Clinic")
                        .WithMany("ClinicUsers")
                        .HasForeignKey("Clinic_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ClinicPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Consultancy", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("Consultancies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Consultancies")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ConsultancyMessage", b =>
                {
                    b.HasOne("AN.Core.Domain.Consultancy", "Consultancy")
                        .WithMany("ConsultancyMessages")
                        .HasForeignKey("ConsultancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ConsultancyMessages")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("ConsultancyMessages")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ContentArticle", b =>
                {
                    b.HasOne("AN.Core.Domain.ContentCategory", "ContentCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ContentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DiseaseRecordsForm", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithOne("DiseaseRecordsForm")
                        .HasForeignKey("AN.Core.Domain.DiseaseRecordsForm", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorActivityLog", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorExpertise", b =>
                {
                    b.HasOne("AN.Core.Domain.Expertise", "Expertise")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ScientificCategory")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("ScientificCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DoctorScientificCategory", b =>
                {
                    b.HasOne("AN.Core.Domain.ScientificCategory", "ScientificCategory")
                        .WithMany("DoctorScientificCategories")
                        .HasForeignKey("ScientificCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupplyInfo", "ServiceSupplyInfo")
                        .WithMany("DoctorScientificCategories")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.DrugGroups", b =>
                {
                    b.HasOne("AN.Core.Domain.Drug", "Drug")
                        .WithMany("DrugGroups")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.PharmaceuticalGroup", "PharmaceuticalGroup")
                        .WithMany("DrugGroups")
                        .HasForeignKey("PharmaceuticalGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Expertise", b =>
                {
                    b.HasOne("AN.Core.Domain.ExpertiseCategory", "ExpertiseCategory")
                        .WithMany("Expertises")
                        .HasForeignKey("ExpertiseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Hospital", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.HospitalPersons", b =>
                {
                    b.HasOne("AN.Core.Domain.Hospital", "Hospital")
                        .WithMany("HospitalUsers")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("HospitalPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.IdentityUser", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("IdentityUsers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.InsuranceBranch", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("InsuranceBranches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Insurance", "Insurance")
                        .WithMany("CityBranches")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.InsuranceService", b =>
                {
                    b.HasOne("AN.Core.Domain.Insurance", "Insurance")
                        .WithMany("Documents")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Invoice", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithMany("Invoices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.InvoiceItem", b =>
                {
                    b.HasOne("AN.Core.Domain.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ShiftCenterCerviceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Offer", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Offers")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("Offers")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PastMedicalHistory", b =>
                {
                    b.HasOne("AN.Core.Domain.TreatmentHistory", "TreatmentHistory")
                        .WithOne("PastMedicalHistory")
                        .HasForeignKey("AN.Core.Domain.PastMedicalHistory", "TreatmentHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Patient", b =>
                {
                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("Patients")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("Patients")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Patients")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PatientInsurance", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupplyInsurance", "Insurance")
                        .WithMany("Patients")
                        .HasForeignKey("ServiceSupplyInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.PatientPersonInfo", "UserPatientInfo")
                        .WithMany("PatientInsurances")
                        .HasForeignKey("UserPatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PatientPersonInfo", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithOne("PatientPersonInfo")
                        .HasForeignKey("AN.Core.Domain.PatientPersonInfo", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PaymentInfo", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("AN.Core.Domain.PaymentInfo", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Person", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Pharmacy", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("Pharmacies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PharmacyDoneTreatments", b =>
                {
                    b.HasOne("AN.Core.Domain.PharmacyPrescription", "PharmacyPrescription")
                        .WithMany("DoneTreatments")
                        .HasForeignKey("PharmacyPrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.PharmacyPrescription", b =>
                {
                    b.HasOne("AN.Core.Domain.Pharmacy", "Pharmacy")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.TreatmentHistory", "TreatmentHistory")
                        .WithMany("PharmacyPrescriptions")
                        .HasForeignKey("TreatmentHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Schedule", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Schedules")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("Schedules")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ScheduleInsurance", b =>
                {
                    b.HasOne("AN.Core.Domain.Schedule", "Schedule")
                        .WithMany("Insurances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupplyInsurance", "Insurance")
                        .WithMany("Schedules")
                        .HasForeignKey("ServiceSupplyInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.Service", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupply", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ServiceSupplies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("ServiceSupplies")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyInfo", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithOne("ServiceSupplyInfo")
                        .HasForeignKey("AN.Core.Domain.ServiceSupplyInfo", "ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyInsurance", b =>
                {
                    b.HasOne("AN.Core.Domain.Insurance", "Insurance")
                        .WithMany("ServiceSupplies")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Insurances")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ServiceSupplyRating", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithOne("Rate")
                        .HasForeignKey("AN.Core.Domain.ServiceSupplyRating", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("Rates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("Rates")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenter", b =>
                {
                    b.HasOne("AN.Core.Domain.City", "City")
                        .WithMany("ShiftCenters")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Clinic", "Clinic")
                        .WithMany("ShiftCenters")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterMessage", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithMany("ShiftCenterMessages")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Person", "ReceiverPerson")
                        .WithMany("ShiftCenterMessages")
                        .HasForeignKey("ReceiverPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("PoliclinicMessages")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterPersons", b =>
                {
                    b.HasOne("AN.Core.Domain.Person", "Person")
                        .WithMany("ShiftCenterPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("ShiftCenterUsers")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.ShiftCenterService", b =>
                {
                    b.HasOne("AN.Core.Domain.Service", "Service")
                        .WithMany("ShiftCenterServices")
                        .HasForeignKey("HealthServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenter", "ShiftCenter")
                        .WithMany("PolyclinicHealthServices")
                        .HasForeignKey("ShiftCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentHistory", b =>
                {
                    b.HasOne("AN.Core.Domain.Appointment", "Appointment")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.Patient", "Patient")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.TreatmentsItems", b =>
                {
                    b.HasOne("AN.Core.Domain.Drug", "Drug")
                        .WithMany("TreatmentsItems")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.TreatmentHistory", "TreatmentHistory")
                        .WithMany("TreatmentsItems")
                        .HasForeignKey("TreatmentHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.UsualScheduleInsurances", b =>
                {
                    b.HasOne("AN.Core.Domain.UsualSchedulePlan", "UsualSchedulePlan")
                        .WithMany("UsualScheduleInsurances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ServiceSupplyInsurance", "Insurance")
                        .WithMany("UsualSchedules")
                        .HasForeignKey("ServiceSupplyInsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AN.Core.Domain.UsualSchedulePlan", b =>
                {
                    b.HasOne("AN.Core.Domain.ServiceSupply", "ServiceSupply")
                        .WithMany("UsualSchedulePlans")
                        .HasForeignKey("ServiceSupplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AN.Core.Domain.ShiftCenterService", "ShiftCenterService")
                        .WithMany("UsualSchedulePlans")
                        .HasForeignKey("ShiftCenterServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
